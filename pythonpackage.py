# -*- coding: utf-8 -*-
"""build_your_own_python_package.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1pXk1gBkuKjHAlhEZiqFibyCbX7AYagf1

## Note:
This notebook was designed to be run as a slideshow.   

To run this notebook in slideshow mode, issue the following terminal command:

`jupyter nbconvert <filename> --to slides ./python_package.ipynb --post serve`

where `<filename>` is the name of this file.

And for more information on notebook slideshows, check out [this link](https://medium.com/@mjspeck/presenting-code-using-jupyter-notebook-slides-a8a3c3b59d67)

Building a Python Package   
#### (Press `spacebar` to view slideshow, `shift+spacebar` to go back, `esc` to view context)   
<img align="left" src="https://github.com/James-Leslie/example-python-package/blob/master/images/0.1_intro.png?raw=true"/>

## Introduction
By now, you will have made use of some very popular Python packages such as **numpy** and **pandas**.

<img align="left" src="https://github.com/James-Leslie/example-python-package/blob/master/images/0.2_intro.png?raw=true"/>

You will struggle to find a Data Scientist who hasn't, at the very least, _heard_ of either these packages.

One of the great features of Python is that it is an open-source programming language, with an active community of developers who have helped, and continue to help, make it so user-friendly and versatile.

Numpy and Pandas are just two examples of useful packages that you will come across on your Data Science journey. There are thousands of Python packages out there, and today we are going to learn how to build our own!

## Lesson overview
  - Build a modular Python library
  - Publish your library to GitHub
  - Share your library with others

## Requirements

Before you get started, here are a few things you will need to do:
  - Install the [VSCode IDE](https://code.visualstudio.com/)
  - Install [Git for Windows](https://gitforwindows.org/)
  - Sign up for a [free GitHub account](https://github.com/)

It is also recommended that you be familiar with GitHub and know how to use Git. So if these words mean nothing to you, then you should take a half-day to familiarize yourself with these tools.

## 1. Getting started
Once all of the necessary software has been installed, we will need to set up our project working directory.

### 1.1. File structure

Navigate to a familiar place in your computer and create a new folder. You may name the folder whatever you like, but it will be easier to follow this tutorial if you name your folder **`mypackage`**.

From here on, we will refer to this new folder as your project's **root folder**.

Note: the naming convention for Python packages is to use short, all-lowercase names. Underscores are permissable, but discouraged.

Open up Atom text editor, then click on:    
**`File`** -> **`Add Project Folder...`**

![image.png](https://github.com/James-Leslie/example-python-package/blob/master/images/1_open_folder.png?raw=true)

### 1.2. Create setup files

The end goal of this tutorial is to make our package _pip installable_. For this to be possible, we will need to structure our files in a very particular way.

Atom has a built-in file browser that allows you to create new files and folders.   

You can toggle **Tree View** in Atom by using `Ctrl+\`, this will reveal the file browser on the left of your screen.

#### 1.2.1. 
Create two new folders within your project's root folder, named **`mypackage`** and **`tests`**.

<img align="left" src="https://github.com/James-Leslie/example-python-package/blob/master/images/2.0_new_folder.png?raw=true">

#### 1.2.2.
Create two files within **`mypackage`** named **`myModule.py`** and **`__init__.py`**.

#### 1.2.3.
Create a file within **`tests`** named **`test.py`**

Your project directory should now look like this:   

<img align="left" src="https://github.com/James-Leslie/example-python-package/blob/master/images/2.2_file_structure.png?raw=true">

## 2. Build your package
Now that we have our folder structure set out, we can start writing some code!

We will need to do three things:
  - create our first function
  - test our function
  - write some documentation for our package

### 2.1. Create our function
The function we are going to create will perform the task of returning the top-n items in an array, in descending order.   

To do this, we will create an algorithm not too dissimilar to the bubble sort.

#### 2.1.1. Docstrings
All good programmers need to know how to write clean, concise and descriptive docstrings for their functions.   

This is where we will start.

Here is an example of a well-documented function:
"""

def fibonacci(n):

    """
    Calculate nth term in fibonacci sequence
    
    Args:
        n (int): nth term in fibonacci sequence to calculate
    
    Returns:
        int: nth term of fibonacci sequence,
             equal to sum of previous two terms
    
    Examples:
        >>> fibonacci(1)
        1        
        >> fibonacci(2)
        1
        >> fibonacci(3)
        2
    """

    if n <= 1:
        return n

    else:
        return fibonacci(n - 1) + fibonacci(n - 2)

"""Add the following into **`myModule.py`**:"""

def top_n(items, n):
    """Return the top n items in an array, in descending order.

    Args:
        items (array): list or array-like object containing numerical values.
        n (int): number of top items to return.

    Returns:
        array: top n items, in descending order.

    Examples:
        >>> top_n([8, 3, 2, 7, 4], 3)
        [8, 7, 3]
    """

"""#### 2.1.2. Function body
And now add the body of the function just below:
"""

def top_n(items, n):
    """
    docstring goes here
    """

    for i in range(n):  # keep sorting until we have the top n items
        for j in range(len(items)-1-i):

            if items[j] > items[j+1]:  # if this item is bigger than next item..
                items[j], items[j+1] = items[j+1], items[j]  # swap the two!
                
    # get last two items
    top_n = items[-n:]
    
    # return in descending order
    return top_n[::-1]

# check function works
top_n([8, 3, 2, 7, 4], 3)

"""This is what it should look like in Atom:   
<img align="left" src="https://github.com/James-Leslie/example-python-package/blob/master/images/3_function_body.png?raw=true">

Now add the following to **`__init__.py`**:
"""

from . import myModule

"""### 2.2. Testing
You should always write some tests for every function.   

In **`test.py`**, add the following:
"""

from mypackage import myModule

def test_top_n():
    """
    make sure top_n works correctly
    """
    
    assert myModule.top_n([8, 3, 2, 7, 4], 3) == [8, 7, 4], 'incorrect'
    assert myModule.top_n([10, 1, 12, 9, 2], 2) == [12, 10], 'incorrect'
    assert myModule.top_n([1, 2, 3, 4, 5], 5) == [5, 4, 3, 2, 1], 'incorrect'

"""### 2.3. Supporting files
Next, we will need to create another file named **`setup.py`** which describes your package.

In your package's root directory, create **`setup.py`** and add the following:
"""

from setuptools import setup, find_packages

setup(
    name='mypackage',
    version='0.1',
    packages=find_packages(exclude=['tests*']),
    license='MIT',
    description='EDSA example python package',
    long_description=open('README.md').read(),
    install_requires=['numpy'],
    url='https://github.com/<username>/<package-name>',
    author='<Your Name>',
    author_email='<Your Email>'
)

"""Consult the table below for some additional information on the parameters in `setup.py`.

| Parameter | Comments |
|---|---|
| name | the name package managers will use for your project, like `numpy` or `pandas` |
| version | the current version number of your project |
| license | name of the [license](https://opensource.org/licenses/) you chose |
| description | one-sentence description of your package |
| install_requires | list of all other packages this package depends on; package managers will install these automatically as needed |

Lastly create **`README.md`** in your project's root folder, and add anything you like to describe your package in more detail.   
Go to [this website](https://www.makeareadme.com/) for some helpful info on how to make a proper README file.

<img align="left" src="https://github.com/James-Leslie/example-python-package/blob/master/images/4.0_readme.png?raw=true">

## 3. Wrap It Up!
You are now ready to ship your package.

### 3.1. Package it locally
When you are ready, run the following in the command line:

```
python setup.py sdist
```

You should see a new folder named **`dist`** that has been created in your project's root directory.

NOTE: You should also see a folder named **`mypackage.egg-info`** that has been created.   

This doesn't need to be included, so you can add it to a **`.gitignore`** file in the root folder of your project.

<img align="left" src="https://github.com/James-Leslie/example-python-package/blob/master/images/4.1_gitignore.png?raw=true">

### 3.2. Distribute to GitHub
We now want to publish our package so that anyone else can download and use it!

#### 3.2.1. Initialize local Git repository
Using any terminal, navigate to your project's root folder and issue the following commands:

```
$ git init
```

```
$ git add .
```

```
$ git commit -m "First commit"
```

#### 3.2.2. Create remote repository
Log into GitHub and create a new repository.

<img align="left" src="https://github.com/James-Leslie/example-python-package/blob/master/images/4.2_new_repo.png?raw=true">

<img align="left" src="https://github.com/James-Leslie/example-python-package/blob/master/images/5_new_repo.png?raw=true">

#### 3.2.3. Push to GitHub
Copy the URL for the remote repository and issue the following commands:

```
$ git remote add origin <remoteURL>
```

```
$ git push origin master
```

### 3.3. Install from GitHub
You can now install your package onto any computer (with internet access)!

Issue the command below to install your package from GitHub.   
(make sure to replace `your-name` and `your-repo` with the appropriate text)   

`pip install git+https://github.com/your-name/your-repo.git`

If you need to install a later version of your package, then use:   

`pip install --upgrade git+https://github.com/your-name/your-repo.git`

### 4. Maintaining your package
You now have a version 0.1 of your first Python package!   

Now you are free to make improvements and expand the scope of your package.

### 4.1. Package development workflow
Follow these steps when making changes to your package:

- make changes locally

- push changes to GitHub

- install updated version

#### 4.1.1. Work locally
Your package consists of a number of interdependent files. It is important to keep all of these dependencies in check.   

A likely workflow will look something like this:

- add new functions, or improve existing functions

- update `test.py` if needed

- update `__init__.py` if needed

- update `setup.py` if needed (make sure to update the version number)

Once you have tested your functions, and you are happy to push the new version. Run the same setup command as before:   
`python setup.py sdist`

#### 4.1.2. Push changes
When you are ready to publish your updated package, follow the commands below:

- `git status`

- `git add .`

- `git commit -m 'make sure to include a detailed commit message'`

- `git push`

#### 4.1.3. Install updates
The last step is to install your updated version, using the command below:   
`pip install --upgrade git+https://github.com/your-name/your-repo.git`

## Finished example
For an example of a working package, check out [this repository](https://github.com/James-Leslie/example-python-package).
"""