# -*- coding: utf-8 -*-
"""Spam Message Detector.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1dTMY6xrIIM2yKfzwtbAkuNeA25qX6Sco

# Natural Language Processing

# Introduction

Natural Language Processing(NLP) is described by https://towardsdatascience.com/natural-language-processing-nlp-for-machine-learning-d44498845d5b as follows:

"NLP is a field in machine learning with the ability of a computer to understand, analyze, manipulate, and potentially generate human language"

## Learning Objectives
* Understand NLP as well as how to apply it.
* Create a spam filter
* Understand how to visualize text data 
* Classifying the text data that was not detected as spam or ham.

## Overview

In this train, we will cover a single example of how computer can classify messages as other spam or ham.

## What is a spam and ham?

A spam is unsolicited messages sent in bulk by email. Most spam messages are commercial in nature. Whether commercial or not, many are not only annoying, but also dangerous because they may contain links that lead to phishing web sites or sites that are hosting malware - or include malware as file attachments.

Now that you are aware of this, A ham is a message that is not a spam.

# Installations

To visualize the text data it would be a good idea to install libraries that will allow you to perform these tasks.
"""

!pip install WordCloud

"""# Creating a spam filter

Not all spam messages are bad some might be adverts you might find interesting. Well because of the **danger** some messages can present to your computer it would be great to have a spam filter in your computer for your messages. This begs the question how can I train my computer to identify spam messages. Firstly we will need to import libraries that will help us acheive that.
"""

# Commented out IPython magic to ensure Python compatibility.
import pandas as pd
from wordcloud import WordCloud
import matplotlib.pyplot as plt
# %matplotlib inline
from sklearn.feature_extraction.text import CountVectorizer
from sklearn.model_selection import train_test_split
from sklearn.tree import DecisionTreeClassifier
from sklearn.metrics import classification_report

"""#### Read data"""

df =pd.read_csv('Spam.csv',sep=';',encoding ='ISO-8859-1')
df.head(3)

"""## Preproccesing
#### 1) Clean data

##### 1.1 Drop Useless Columns
"""

df= df.drop(['Unnamed: 2','Unnamed: 3','Unnamed: 4'],axis =1)

df.columns = ['labels','data']
df.head()

"""##### 1.2 using the map function change ham and spam to integers """

df['b_labels']  = df['labels'].map({'ham':0,'spam':1})

"""#### Lets have a look at out Clean Data"""

df.head(3)

print(df['data'][5])

print(df['data'][10])

"""#### 2) Set target variable and features"""

Y = df['b_labels']
X = df['data']

"""#### 3) Vectorize words
Word vectorization is the proccess of getting features from words
See link for more inforamtion  https://machinelearningmastery.com/gentle-introduction-bag-words-model/
"""

count_vectorizer = CountVectorizer(decode_error = 'ignore')
X_vectorized = count_vectorizer.fit_transform(X)

"""#### 4) Train test Split"""

X_train, X_test, y_train, y_test = train_test_split(X_vectorized, Y, test_size = 0.33)

"""## Train Model"""

model = DecisionTreeClassifier()
model.fit(Xtrain,Ytrain)

## Evaluate Model

pred = model.predict(X_test)

print('Classification Report')
print(classification_report(y_test, pred, target_names=['No', 'Yes']))

"""## Well done
You just built your first SMS spam filter. The next step would be you visualize the actual words that make a message a spam or make it a ham. 
"""

def visualize(label):
    words = ''
    for msg in df[df['labels'] == label]['data']:
        msg = msg.lower()
        words +=msg+ ''
    wordcloud = WordCloud(width = 1000, height = 800,stopwords= STOPWORDS).generate(words)
    plt.imshow(wordcloud)
    plt.axis('off')
    plt.show()

visualize('spam')

visualize('ham')